#
# (c) Copyright 2011 SailPoint Technologies, Inc., All Rights Reserved.
#

### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n

# this one is better for concurrency tests
#log4j.appender.stdout.layout.ConversionPattern=%t %5p %c{4}:%L - %m%n

### direct log messages to the db
log4j.appender.syslog=sailpoint.api.logging.SyslogAppender

# Below is an example of how to create a logger that writes to a file
# uncomment the following four lines, then add  the value "file" to 
# the log4j.rootLogger list
# 
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=C:/Tomcat/sailpoint.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n
#log4j.appender.file.MaxFileSize=5000KB
#log4j.appender.file.MaxBackupIndex=10



# Below is an example of how to create a rolling file appender logger that writes to a file
# 
#log4j.appender.file=org.apache.log4j.RollingFileAppender
#log4j.appender.file.File=/home/spadmin/logs/iiq_training_rolling.log
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n
#log4j.appender.file.MaxFileSize=5000KB
#log4j.appender.file.MaxBackupIndex=10


### set log levels - for more verbose logging change 'error' to 'warn', 'info', 'debug' or 'trace' 
##
log4j.rootLogger=error,file
# 
# 
# supress warnings
#
#
# Suppress "narrowing proxy" hibernate warning.
log4j.logger.org.hibernate.engine.StatefulPersistenceContext=error 
# Suppress warning message about Unparsable lastModified
log4j.logger.org.apache.myfaces.renderkit.html.util.MyFacesResourceLoader=error
# Suppress warning message about response not having <head> or <body> tags
log4j.logger.org.apache.myfaces.renderkit.html.util.DefaultAddResource=error
# Suppress warning message about invalid HTML inside javascript
#   See http://www.mail-archive.com/users@myfaces.apache.org/msg50391.html
log4j.logger.org.apache.myfaces.renderkit.html.util.ReducedHTMLParser=error
#
log4j.logger.jasperreports.engine.xml.JRBandFactory=error
log4j.logger.jasperreports.engine.xml.JRAbstractStyleFactory=error
# will ge warnings about deprecated gadets during import if we don't
# exclude warnings
log4j.logger.net.sf.jasperreports.engine.xml=error
# Will get a warning about using a default configuration, proably
# should be specifying a configuaration?
log4j.logger.net.sf.ehcache=error

# Suppress a warning about using a default configuration
log4j.logger.net.sf.ehcache=error

# Suppress "narrowing proxy" hibernate warning.
log4j.logger.org.hibernate.engine.StatefulPersistenceContext=error

# Suppress warnings about deprecated gadgets during import
log4j.logger.net.sf.jasperreports.engine.xml=error

# Note:  The following logging properties turn off warnings that result from our
#        combination of technologies (Tomahawk/Faceletes/A4J, etc.).  
#        Commenting them out will result in a slew of parser warnings.
#        If you don't want to clutter your logs with a bunch of useless warning
#        messages please leave these as they are.  
# Suppress warning message about Unparsable lastModified
log4j.logger.org.apache.myfaces.renderkit.html.util.MyFacesResourceLoader=error
# Suppress warning message about response not having <head> or <body> tags
log4j.logger.org.apache.myfaces.renderkit.html.util.DefaultAddResource=error
# Suppress warning message about invalid HTML inside javascript
#   See http://www.mail-archive.com/users@myfaces.apache.org/msg50391.html
log4j.logger.org.apache.myfaces.renderkit.html.util.ReducedHTMLParser=error


#
# New Syslog Logger Functionality
#
log4j.logger.sailpoint=warn, syslog

# make sure the syslog code doesn't try to call itself if there's a problem.
# NOTE: The additivity flag is critical here!
log4j.logger.sailpoint.api.logging.SyslogAppender=error, stdout
log4j.additivity.sailpoint.api.logging.SyslogAppender=false

log4j.logger.sailpoint.object.SyslogEvent=error, stdout
log4j.additivity.sailpoint.object.SyslogEvent=false


#log4j.logger.org.hibernate=trace
#log4j.logger.org.hibernate.cache=trace
#log4j.logger.org.springframework=trace


# Uncomment to trace all SQL and prepared statement parameter values.
#log4j.logger.org.hibernate.SQL=trace
#log4j.logger.org.hibernate.type=trace


#log4j.logger.sailpoint.web.util.PhaseTracker=trace
#log4j.logger.com.sun.faces=trace
#log4j.logger.javax.faces=trace
#log4j.logger.sailpoint.reporting=trace
#log4j.logger.sailpoint.web.util.TimingFilter=debug
#log4j.logger.sailpoint.api.CorrelationModel=info
#log4j.logger.sailpoint.task.RoleSynchronizer=info
#log4j.logger.sailpoint.api.CacheTracker=debug
#log4j.logger.sailpoint.api.LockTracker=debug


# Trace this package for any UI related issues
#log4j.logger.sailpoint.web=trace


# Trace this package for issues related to web services
#log4j.logger.sailpoint.rest=trace
#log4j.logger.sailpoint.service.IIQRestService=info

# Trace this package for problems related to any IIQ application.
# You might try the connectorDebug command via the "iiq console"
# before using this.
#log4j.logger.sailpoint.connector=trace
#
# for Connector Gateway-based connectors
#log4j.logger.sailpoint.connector.sm=trace
# for AD/LDAP Connector Issues
#log4j.logger.sailpoint.connector.LDAPConnector=trace
log4j.logger.sailpoint.connector.JDBCConnector=debug

#
# Aggregation
#
# Trace these three classes for issues related to Aggregation
#log4j.logger.sailpoint.api.Aggregator=trace
#log4j.logger.sailpoint.api.Identitizer=trace
#log4j.logger.sailpoint.api.Correlator=trace

#
# Identity Refresh
#
# Trace these classes for issues related to executing the
# Identity Refresh task
#log4j.logger.sailpoint.task.IdentityRefreshExecutor=trace
#log4j.logger.sailpoint.api.Identitizer=trace


#
# Entitlement Correlation
#
# Trace these classes for issues related to Entitlement Correlation
#log4j.logger.sailpoint.task.EntitlementCorrelationExecutor=trace
#log4j.logger.sailpoint.api.Identitizer=trace

#
# Role Mining
#
# Trace these three classes for issues related to role mining.
#log4j.logger.sailpoint.task.DirectRoleMiner=trace
#log4j.logger.sailpoint.task.DirectMiningTask=trace
#log4j.logger.sailpoint.task.EntitlementRoleGenerator=trace


#
# Remediation
#
# Trace these classes for issues related to remediation task
# execution, for example provisioning activity due to a 
# remediation.
#log4j.logger.sailpoint.api.certification.RemediationManager=trace
#log4j.logger.sailpoint.task.Housekeeper=trace


#
# IIQ Request processing
#
# Trace this package for problems related to IIQ request
# processing such as workflow, email and SPML requests.
#log4j.logger.sailpoint.request=trace


# Scheduling (Quartz) 
#
# Trace this package for problems related to execution of 
# the IIQ scheduler (Quartz).
#log4j.logger.sailpoint.scheduler=trace
#log4j.logger.org.quartz=trace

#
# Reporting
#
# Trace these two packages for problems related to IIQ reporting.
#log4j.logger.sailpoint.reporting=trace
#log4j.logger.sailpoint.reporting.datasource=trace

#
# Certificationer
#
# Trace the following five classes when you are having issues
# with certification finishing during execution of the perform
# maintenance task
#log4j.logger.sailpoint.task.Housekeeper=trace
#log4j.logger.sailpoint.api.Certificationer=trace
#log4j.logger.sailpoint.object.Certification=trace
#log4j.logger.sailpoint.object.CertificationEntity=trace
#log4j.logger.sailpoint.object.CertificationItem=trace


#
# Hibernate/DB/Persistance
#
# Trace the following two classes when you need to see what
# database operations are being performed.
# WARNING: TRACE OUTPUT CAN BE LARGE IN SIZE
#log4j.logger.sailpoint.persistence.hql=debug
#log4j.logger.sailpoint.persistence.XmlType=info
#log4j.logger.sailpoint.persistence.HibernatePersistenceManager=debug
#log4j.logger.sailpoint.persistence.MapType=info
#log4j.logger.sailpoint.persistence.PasswordType=info
#log4j.logger.sailpoint.persistence.DateType=info
#log4j.logger.sailpoint.persistence.SailPointInterceptor=info
#log4j.logger.sailpoint.persistence.DebugInterceptor=debug

#
# Provisioning
#
# TRACE ALL OF THESE FOR PROVISIONING INTEGRATION ISSUES
# This is the main entry point for all provisioning requests.
#log4j.logger.sailpoint.api.Provisioner=trace
#
# Called by Provisioner to expand roles and figure out what 
# integrations to use. This is one of the more useful classes 
# to trace to determine what a role expanded into, but it is quite verbose.
# (lots of XML representations of plans at various phases)
#log4j.logger.sailpoint.provisioning.PlanCompiler=trace
#
# Called by Provisioner after plan compilation to call the executors.
#log4j.logger.sailpoint.provisioning.PlanEvaluator=trace
#
# Handles the parts of the plan targeted at the IIQ identity cubes.
#log4j.logger.sailpoint.provisioning.IIQEvaluator=trace
#
# The implementation of the integration executor interface
# eventually called by PlanEvaluator. Tracing on whole package here
# instead of having to know the specific class name used for a
# particular integration.
#log4j.logger.sailpoint.integration=trace
#
#log4j.logger.sailpoint.connector.sm=trace


#
# Email
#
#log4j.logger.sailpoint.request.EmailRequestExecutor=trace
#log4j.logger.sailpoint.api.EmailNotifier=trace
#log4j.logger.sailpoint.api.EmailSuppressor=trace
#log4j.logger.sailpoint.api.Emailer=trace
#log4j.logger.sailpoint.api.SMTPEmailNotifier=trace
#log4j.logger.sailpoint.api.RedirectingEmailNotifer=trace

#
# Workflow
#
#log4j.logger.sailpoint.api.Workflower=debug
#log4j.logger.sailpoint.workflow.WorkflowHandler=debug
#log4j.logger.sailpoint.workflow.WorkflowLibrary=debug

#
# Debug for the custom Task from class
#
#log4j.logger.sailpoint.custom.training.TaskExample=debug

#
# Delta Aggregation Debug Options
#
#log4j.logger.sailpoint.connector.sm=debug
#log4j.logger.sailpoint.object.ResourceEvent=debug
#log4j.logger.sailpoint.object.ProvisioningPlan=debug





